## Hikari is the default DataSource implementation. So no need of seperate configuration class.
## For custom data source we might need it.
## Hikari is a JDBC DataSource implementation that provides a connection pooling mechanism. 
## It provides many advanced features while configuring our datasource in comparison to other datasources such as 
## connectionTimeout, idleTimeout, maxLifetime, connectionTestQuery, maximumPoolSize and very important one is leakDetectionThreshold.
## It is as advanced as detecting connection leaks by itself.It is also faster and lighter than other available datasource.

## Sample:
## spring.datasource.hikari.connectionTimeout=30000 
## spring.datasource.hikari.idleTimeout=600000 
## spring.datasource.hikari.maxLifetime=1800000 

################################ Configuration for MySQLDB #############################################

spring.datasource.url=jdbc:mysql://localhost:3306/school
#(Datasource URL of your DB and "schooldb", here is your schema name)
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.username=root
spring.datasource.password=admin
spring.jpa.show-sql=true

spring.datasource.hikari.connectionTimeout=30000 
spring.datasource.hikari.idleTimeout=600000 
spring.datasource.hikari.maxLifetime=1800000 

spring.jpa.hibernate.ddl-auto=update